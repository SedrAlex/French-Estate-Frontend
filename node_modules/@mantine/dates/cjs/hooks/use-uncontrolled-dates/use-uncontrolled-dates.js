'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var hooks = require('@mantine/hooks');
var React = require('react');

const getEmptyValue = (type) => type === "range" ? [null, null] : type === "multiple" ? [] : null;
function useUncontrolledDates({
  type,
  value,
  defaultValue,
  onChange
}) {
  const storedType = React.useRef(type);
  const [_value, _setValue] = hooks.useUncontrolled({
    value,
    defaultValue,
    onChange,
    finalValue: getEmptyValue(type)
  });
  let _finalValue = _value;
  if (storedType.current !== type) {
    storedType.current = type;
    if (value === void 0) {
      _finalValue = defaultValue !== void 0 ? defaultValue : getEmptyValue(type);
      _setValue(_finalValue);
    } else if (process.env.NODE_ENV === "development") {
      switch (type) {
        case "default":
          if (value !== null && typeof value !== "string") {
            console.error("[@mantine/dates/use-uncontrolled-dates] Value must be type of `null` or `string`");
          }
          break;
        case "multiple":
          if (!(value instanceof Array)) {
            console.error("[@mantine/dates/use-uncontrolled-dates] Value must be type of `string[]`");
          }
          break;
        case "range":
          if (!(value instanceof Array) || value.length !== 2) {
            console.error("[@mantine/dates/use-uncontrolled-dates] Value must be type of `[string, string]`");
          }
          break;
      }
    }
  }
  return [_finalValue, _setValue];
}

exports.useUncontrolledDates = useUncontrolledDates;
//# sourceMappingURL=use-uncontrolled-dates.js.map
